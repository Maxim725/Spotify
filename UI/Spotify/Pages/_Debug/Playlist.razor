@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject SelectionService SelectionService 

@using Spotify.Domain.Entities.Intermediate

@page "/debug/newplaylist"

<AuthorizeView>
    <Authorized>
        @if (context.User.Identity.IsAuthenticated)
        {
            <_Sidebar UserId="@UserId" SelectedItem=-1></_Sidebar>
            <div class="container">
                <header class="header">
                    <input type="text" class="search" placeholder="Поиск">
                    <_Profile UserId="@UserId" UserName="@context.User.Identity.Name"></_Profile>
                </header>
                <main class="main">
					<form action="POST" method="POST">
	                    <div class="playlist-view">
	                        <div class="playlist-view__main">
								<button>
									<img class="playlist-view__main-img" src="/images/icons/newplaylist.svg" alt="">
								</button>
	                            <div class="playlist-view__main-right">
	                                <input type="text" placeholder="Введите название плейлиста">
									<h2>
										@context.User.Identity.Name
									</h2>
									<button type="submit" class="playlist-view__main-save">
										Сохранить
									</button>
	                            </div>
	                        </div>
							<hr>
	                        <div class="album-view__tracks">
							    @foreach (UserLikedTrack track in Tracks)
							    {
							        <div class="album-view__track">
							            <div class="album-view__track-left">
							                @* <button></button> *@
							                <div class="playlist-view__track-creds">
							                    <span class="album-view__track-name">
							                        @track.Track.Title
							                    </span>
							                    <span class="album-view__track-artist">
							                        <a href="/debug">
							                        @* <a href="/debug/Artist/@track.Track.Authors.First().AuthorId"> *@
							                            @try
							                            {
							                                @track.Track.Authors.First().Author.Name
							                            }
							                            catch(Exception e)
							                            {
							                                <span>Travis Scott</span>
							                            }
							                        </a>
							                    </span>
							                </div>
							            </div>
							            <div class="album-view__track-right">
							                <input type="checkbox" class="playlist-view__checkbox" id="@track.TrackId" name="@track.TrackId" value="@track.TrackId">
											<label for="@track.TrackId" class="playlist-view__label"></label>
							                <span>
							                    @track.Track.Duration
							                </span>
							            </div>
							        </div>
							    }
							</div>
	                    </div>
					</form>
                </main>
            </div>
            <_Footer></_Footer>
        }
        else
        {
            <_RedirectToLogin Login="/Identity/Account/Login"></_RedirectToLogin>
        }
    </Authorized>
    <NotAuthorized>
        <_RedirectToLogin Login="/Identity/Account/Login"></_RedirectToLogin>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int UserId { get; set; }

	private IEnumerable<UserLikedTrack>Tracks { get; set; }

	protected override void OnInitialized()
	{
		if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
        {
            var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;

            UserId = int.Parse(claims.First(x => x.Type.Contains("nameidentifier")).Value);

            Tracks = SelectionService.GetUserLikedTracks(UserId);
        }
        else
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        }
	}
}