@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject SelectionService SelectionService 

@page "/debug"

<AuthorizeView>
    <Authorized>
        @if (context.User.Identity.IsAuthenticated)
        {
            <_Sidebar UserId="@ID"></_Sidebar>
            <div class="container">
                <header class="header">
                    <input type="text" class="search" placeholder="Поиск">
                    <_Profile UserId="@ID"></_Profile>
                </header>
                <main class="main">
                    <_TopicWithAlbums Title="Недавно добавленные" SetAlbums="@AlbumsId()" ScrollerId=1></_TopicWithAlbums>
                    <_TopicWithAlbums Title="Лучшие альбомы" Subtitle="Подборки хитов по исполнителям" SetAlbums="@PopularAlbums()" ScrollerId=2></_TopicWithAlbums>
                </main>
            </div>
            <_Footer></_Footer>
            <_UserProfile UserId="@ID"></_UserProfile>
        }
        else
        {
            <_RedirectToLogin Login="/Identity/Account/Login"></_RedirectToLogin>
        }
    </Authorized>
    <NotAuthorized>
        <_RedirectToLogin Login="/Identity/Account/Login"></_RedirectToLogin>
    </NotAuthorized>
</AuthorizeView>


@code {
    private int ID { get; set; }

    protected override void OnInitialized()
    {
        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
        {
            var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;

            ID = int.Parse(claims.First(x => x.Type.Contains("nameidentifier")).Value);
        }
        else
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        }
    }

    private IEnumerable<int> AlbumsId()
    {
        return SelectionService.GetAlbumsIdByUserId(ID);
    }

    private IEnumerable<int> PopularAlbums()
    {
        return SelectionService.GetPopularAlbumsId();
    }
} 