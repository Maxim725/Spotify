@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject SelectionService SelectionService

@using Microsoft.AspNetCore.WebUtilities

@page "/debug/search"
<AuthorizeView>
    <Authorized>
        @if (context.User.Identity.IsAuthenticated)
        {

            <_Sidebar UserId="@UserId" SelectedItem=-1></_Sidebar>
            <div class="container">
                <header class="header">
                    <input type="text" class="search" placeholder="Поиск" @bind-value="@SearchString">
                    <_Profile UserId="@UserId" UserName="@context.User.Identity.Name"></_Profile>
                </header>
                <main class="main">
                    <_Search @bind-SearchString="SearchString"></_Search>
                </main>
            </div>
            <_Footer></_Footer>
        }
        else
        {
            <_RedirectToLogin></_RedirectToLogin>
        }
    </Authorized>
    <NotAuthorized>
        <_RedirectToLogin></_RedirectToLogin>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string SearchString = "";

    private int UserId { get; set; }
    
    protected override void OnInitialized()
    {
        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
        {
            var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;

            UserId = int.Parse(claims.First(x => x.Type.Contains("nameidentifier")).Value);
        }
        else
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        }

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("Search", out var search))
        {
            SearchString = search.First();
        }
    }

} 