@using Spotify.Domain.Entities.Intermediate
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject SelectionService SelectionService

@page "/debug/library"

<AuthorizeView>
    <Authorized>
        @if (context.User.Identity.IsAuthenticated)
        {
            <_Sidebar UserId="@UserId" SelectedItem=2></_Sidebar>
            <div class="container">
                <header class="header">
                    <input type="text" class="search" placeholder="Поиск">
                    <_Profile UserId="@UserId"></_Profile>
                </header>
                <main class="main">
                    <div class="album-view">
                        <div class="album-view__tracks">
                            @* @foreach (UserLikedTrack track in Tracks) *@
							@for (int i = 0; i < Tracks.Count(); i++)
                            {
                                <div class="album-view__track">
                                    <div class="album-view__track-left">
                                        <img class="album__img" src="@pair[i].Track.Album.Cover">
                                        <div class="album-view__track-creds">
                                            <span class="album-view__track-name">
                                                @Tracks[i].Track.Title
                                            </span>
                                            <span class="album-view__track-artist">
                                                <a href="/debug/Artist/@pair[i].Track.Authors.First().AuthorId">
                                                @* <a href="/debug/"> *@
                                                    @try
                                                    {
                                                        @pair[i].Authors.First().Author.Name
                                                    }
                                                    catch (Exception e)
                                                    {
                                                        <span>Travis Scott</span>
                                                    }
                                                </a>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="album-view__track-right">
                                        <button></button>
                                        <span>
                                            @Tracks[i].Track.Duration
                                        </span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </main>
            </div>
            <_Footer></_Footer>
        }
        else
        {
            <_RedirectToLogin></_RedirectToLogin>
        }
    </Authorized>
    <NotAuthorized>
        <_RedirectToLogin></_RedirectToLogin>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int UserId { get; set; }

	private UserLikedTrack[] Tracks { get; set; }

	private AlbumTrack[] pair { get; set; }

	protected override void OnInitialized()
	{
		if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
        {
            var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;

            UserId = int.Parse(claims.First(x => x.Type.Contains("nameidentifier")).Value);

            Tracks = SelectionService.GetUserLikedTracks(UserId).ToArray();
			pair = SelectionService.GetAlbumTrack(Tracks.Select(x => x.TrackId)).ToArray();
        }
        else
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        }
	}
} 