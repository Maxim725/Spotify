@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject SelectionService SelectionService
@page "/debug/album/{AlbumId:int}"

<AuthorizeView>
    <Authorized>
        @if (context.User.Identity.IsAuthenticated)
        {
            <_Sidebar UserId="@UserId"></_Sidebar>
            <div class="container">
                <header class="header">
                    <input type="text" class="search" placeholder="Поиск">
                    <_Profile UserId="@UserId"></_Profile>
                </header>
                <main class="main">
                    <div class="artist">
                        <div class="artist__main">
                            <img class="artist__main-img" src="/images/debug/boka1.jpg" alt="">
                            <div class="artist__main-right">
                                <h1>
                                    @GetNameArtist()
                                </h1>
                                <div class="artist__buttons">
                                    <button>
                                        <img src="/images/icons/play_button.svg" alt="">
                                    </button>
                                    <button>
                                        <img src="/images/icons/filled_heart.svg" alt="">
                                    </button>
                                    <button>
                                        <img src="/images/icons/more.svg" alt="">
                                    </button>
                                </div>
                            </div>
                        </div>
                        <_AlbumTracks AlbumId="@AlbumId"></_AlbumTracks>
                    </div>
                </main>
            </div>
            <_Footer></_Footer>
            <_UserProfile UserId="@UserId"></_UserProfile>

        }
        else
        {
            <_RedirectToLogin></_RedirectToLogin>
        }
    </Authorized>
    <NotAuthorized>
        <_RedirectToLogin></_RedirectToLogin>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int UserId { get; set; }

    [Parameter]
    public int AlbumId { get; set; }
    protected override void OnInitialized()
    {

        if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
        {
            var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;

            UserId = int.Parse(claims.First(x => x.Type.Contains("nameidentifier")).Value);
        }
        else
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        }
    }

    private string GetNameArtist()
    {
        //var res = SelectionService.GetAlbumById(AlbumId)?.Authors?.First()?.Author?.Name ?? "";'
        var res = "";
        return res == "" ? "Unknown" : res;
    }


} 