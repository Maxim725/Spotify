@inject SelectionService SelectionService
@inject IJSRuntime js

@if (Album is not null)
{
    <div class="album" id="@ScrollerId">
        <a href="/debug/album/@Album.AlbumId">
            <img src="@Album.Cover" alt="" class='album__img'>
        </a>
		@if (Album.Tracks.Count > 0 && Album.Tracks[0].Track is not null) {
			<button class="album__play-button" @onclick="PlayAlbum"></button>
		}
        <div class="album__text">
            <span class="album__name">
                <a href="/debug/album/@Album.AlbumId">
                    @Album.Title
                </a>
            </span>
            <span class="album__artist">
                @for (int i = 0; i < Album.Authors.Count; i++)
                {
                    <a href="/debug/Artist/@Album.Authors[i].AuthorId">@try
                    {@Album.Authors[i].Author.Name }
                catch (Exception e)
                { <span>[Deleted]</span>}</a>
                }
            </span>
            <span class="album__info">
                Последний релиз · @TypeAlbums
            </span>
        </div>
    </div>
}
@code {
    [Parameter]
    public int AlbumId { get; set; }

	[Parameter]
    public int ScrollerId { get; set; }

    private Album Album { get; set; }
    private string TypeAlbums { get; set; }

    protected override void OnInitialized()
    {
        int CountTracks;

        Album = SelectionService.GetAlbumById(AlbumId);
        CountTracks = Album.Tracks.Count();

        if(CountTracks > 1)
        {
            TypeAlbums = "Альбом";
        }
        else if(CountTracks == 1)
        {
            TypeAlbums = "Сингл";
        }
        else
        {
            TypeAlbums = "Сингл";
            //throw new Exception("В альбоме 0 треков, беда!!");
        }
    }

	protected void PlayAlbum() {
		js.InvokeVoidAsync("player.play", new {
			title = Album.Tracks[0].Track.Title,
			cover = Album.Cover,
			album = "/debug/album/" + Album.AlbumId,
			url = "/data/track/" + Album.Tracks[0].TrackId,
			artist = Album.Authors[0].Author.Name,
			artistUrl = "/debug/artist/" + Album.Authors[0].AuthorId
		});

		js.InvokeVoidAsync("player.clearQueue");

        for (int j = 1; j < Album.Tracks.Count(); j++) {
			var album = SelectionService.GetAlbumByTrackId(Album.Tracks[j].TrackId);

            js.InvokeVoidAsync("player.addQueue", new {
                title = Album.Tracks[j].Track.Title,
                cover = album.Cover,
                album = "/debug/album/" + album.AlbumId,
                url = "/data/track/" + Album.Tracks[j].TrackId,
                artist = album.Authors[0].Author.Name,
                artistUrl = "/debug/artist/" + album.Authors[0].AuthorId
            });
        }

        js.InvokeVoidAsync("player.setQueue", 0);
	}
}
