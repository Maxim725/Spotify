@inject SelectionService SelectionService
@inject IJSRuntime js

@if (!String.IsNullOrWhiteSpace(Title))
{
    <h2>
        @Title 
    </h2>
}
<div class="artist__tracks">
    <div class="artist__tracks-container">
        @if (Tracks.Length != 0)
        {
            int k = 0;
            for (int i = 0; i < ColumnCount; i++)
            {
                <div class="artist__tracks-column">
                    @for (int j = 0; j < AmountTrackInColumn; j++)
                    {
						int o = k;
						Album album = SelectionService.GetAlbumByTrackId(Tracks[k].TrackId);
                        <div class="artist__track" @onclick="@(() => {PlayTrack(Tracks[o]);})">
                            <div class="artist__track-left">
                                <button>
                                    @if (string.IsNullOrWhiteSpace(Cover[k]))
                                    {
                                        <img src="/data/album-cover/0" alt="">
                                    }
                                    else
                                    {
                                        <img src="@Cover" alt="">
                                    }
                                </button>
                            </div>
                            <div class="artist__track-creds">
                                <span class="artist__track-name">
                                    @Tracks[k].Title
                                </span>
                                <span class="artist__track-album">
                                    @album.Title · @Tracks[k].CreatedOn.Year
                                </span>
                            </div>
                            <button></button>
                        </div>
                        k++;
                        if (k == Tracks.Length || k == 9)
                            break;
                    } 
                </div>
                if (k == Tracks.Length || k == 9)
                {
                    k = 0;
                    break;
                }
            }
        }
    </div>
</div>
@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int? ArtistId { get; set; }

    private string[] Cover { get; set; } = new string[9];
    
    [Parameter]
    public Track[] Tracks { get; set; }

    private int ColumnCount { get; set; } = 3;

    private int AmountTrackInColumn { get; set; } = 3;


    protected override void OnInitialized()
    {
        
        if(ArtistId.HasValue)
        {
            Tracks = SelectionService.GetPopularTracksByArtist(ArtistId.Value).ToArray();
        }
    }

	protected void PlayTrack(Track track) {
		Album album = SelectionService.GetAlbumByTrackId(track.TrackId);

		js.InvokeVoidAsync("player.play", new {
				title = track.Title,
				cover = album.Cover,
				album = "/debug/album/" + album.AlbumId,
				url = "/data/track/" + track.TrackId,
				artist = album.Authors[0].Author.Name,
				artistUrl = "/debug/artist/" + album.Authors[0].AuthorId
		});
	}

}
